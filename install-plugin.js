#!/usr/bin/env node

/**
 * Plugin Installation Script for Stremio Management Panel
 * 
 * This script installs plugins without modifying the core codebase.
 * It creates symbolic links and registers the plugin with the panel.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Parse command line arguments
const args = process.argv.slice(2);
let pluginName = '';

// Extract plugin name from arguments
for (const arg of args) {
  if (arg.startsWith('--plugin=')) {
    pluginName = arg.split('=')[1];
    break;
  }
}

// If no plugin specified, show usage
if (!pluginName) {
  console.log('Usage: node install-plugin.js --plugin=<plugin-name>');
  console.log('Available plugins:');
  
  // List available plugins
  const pluginsDir = path.join(__dirname, 'plugins');
  if (fs.existsSync(pluginsDir)) {
    const plugins = fs.readdirSync(pluginsDir)
      .filter(dir => fs.statSync(path.join(pluginsDir, dir)).isDirectory());
    
    plugins.forEach(plugin => {
      try {
        const metadata = require(path.join(pluginsDir, plugin, 'plugin.json'));
        console.log(`- ${plugin}: ${metadata.description}`);
      } catch (error) {
        console.log(`- ${plugin}`);
      }
    });
  }
  
  process.exit(0);
}

// Check if plugin exists
const pluginDir = path.join(__dirname, 'plugins', pluginName);
if (!fs.existsSync(pluginDir)) {
  console.error(`Error: Plugin '${pluginName}' not found.`);
  process.exit(1);
}

// Load plugin metadata
let metadata;
try {
  metadata = require(path.join(pluginDir, 'plugin.json'));
} catch (error) {
  console.error(`Error: Invalid plugin metadata for '${pluginName}'.`);
  process.exit(1);
}

console.log(`Installing ${metadata.name} v${metadata.version}...`);
console.log(`Description: ${metadata.description}`);

// Create plugins directory in backend if it doesn't exist
const backendPluginsDir = path.join(__dirname, 'backend', 'src', 'plugins');
if (!fs.existsSync(backendPluginsDir)) {
  fs.mkdirSync(backendPluginsDir, { recursive: true });
}

// Create plugin directory in backend
const backendPluginDir = path.join(backendPluginsDir, pluginName);
if (!fs.existsSync(backendPluginDir)) {
  fs.mkdirSync(backendPluginDir, { recursive: true });
}

// Copy plugin files to backend
console.log('Copying plugin files...');
const filesToCopy = [
  'routes',
  'models',
  'controllers',
  'services',
  'middleware',
  'plugin.json'
];

filesToCopy.forEach(item => {
  const sourcePath = path.join(pluginDir, item);
  const destPath = path.join(backendPluginDir, item);
  
  if (fs.existsSync(sourcePath)) {
    if (fs.statSync(sourcePath).isDirectory()) {
      // Copy directory
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath, { recursive: true });
      }
      
      const files = fs.readdirSync(sourcePath);
      files.forEach(file => {
        const sourceFilePath = path.join(sourcePath, file);
        const destFilePath = path.join(destPath, file);
        
        if (fs.statSync(sourceFilePath).isFile()) {
          fs.copyFileSync(sourceFilePath, destFilePath);
        }
      });
    } else {
      // Copy file
      fs.copyFileSync(sourcePath, destPath);
    }
  }
});

// Create plugin loader if it doesn't exist
const pluginLoaderPath = path.join(backendPluginsDir, 'plugin-loader.js');
if (!fs.existsSync(pluginLoaderPath)) {
  console.log('Creating plugin loader...');
  
  const pluginLoaderContent = `/**
 * Plugin Loader for Stremio Management Panel
 * 
 * This file is automatically generated and loads all installed plugins.
 */

const fs = require('fs');
const path = require('path');
const express = require('express');

/**
 * Load all installed plugins
 * @param {Object} app - Express app instance
 * @param {Object} options - Plugin loader options
 */
module.exports = function loadPlugins(app, options = {}) {
  console.log('Loading plugins...');
  
  // Get all plugin directories
  const pluginsDir = __dirname;
  const plugins = fs.readdirSync(pluginsDir)
    .filter(dir => {
      const pluginDir = path.join(pluginsDir, dir);
      return fs.statSync(pluginDir).isDirectory() && 
             fs.existsSync(path.join(pluginDir, 'plugin.json'));
    });
  
  // Load each plugin
  plugins.forEach(pluginName => {
    try {
      const pluginDir = path.join(pluginsDir, pluginName);
      const metadata = require(path.join(pluginDir, 'plugin.json'));
      
      console.log(\`Loading plugin: \${metadata.name} v\${metadata.version}\`);
      
      // Load plugin routes if they exist
      const routesDir = path.join(pluginDir, 'routes');
      if (fs.existsSync(routesDir)) {
        const routeFiles = fs.readdirSync(routesDir)
          .filter(file => file.endsWith('.js'));
        
        routeFiles.forEach(file => {
          const routePath = \`/api/plugins/\${pluginName}/\${file.replace('.routes.js', '')}\`;
          const router = require(path.join(routesDir, file));
          
          console.log(\`  - Registering route: \${routePath}\`);
          app.use(routePath, router);
        });
      }
      
      // Execute plugin initialization if it exists
      const initPath = path.join(pluginDir, 'init.js');
      if (fs.existsSync(initPath)) {
        const init = require(initPath);
        if (typeof init === 'function') {
          init(app, options);
        }
      }
      
      console.log(\`  - Plugin \${metadata.name} loaded successfully\`);
    } catch (error) {
      console.error(\`Error loading plugin \${pluginName}:\`, error);
    }
  });
  
  console.log('All plugins loaded.');
};
`;
  
  fs.writeFileSync(pluginLoaderPath, pluginLoaderContent);
}

// Update server.js to load plugins
const serverPath = path.join(__dirname, 'backend', 'src', 'server.js');
let serverContent = fs.readFileSync(serverPath, 'utf8');

// Check if plugin loader is already imported
if (!serverContent.includes('const loadPlugins')) {
  console.log('Updating server.js to load plugins...');
  
  // Add plugin loader import
  const importLine = "const loadPlugins = require('./plugins/plugin-loader');\n";
  serverContent = serverContent.replace(
    "const dotenv = require('dotenv');",
    `const dotenv = require('dotenv');\n${importLine}`
  );
  
  // Add plugin loader call before the error handling middleware
  const pluginLoaderCall = "\n// Load plugins\nloadPlugins(app);\n";
  serverContent = serverContent.replace(
    "// Error handling middleware",
    `${pluginLoaderCall}\n// Error handling middleware`
  );
  
  // Write updated server.js
  fs.writeFileSync(serverPath, serverContent);
}

// Install plugin dependencies if package.json exists
const pluginPackageJsonPath = path.join(pluginDir, 'package.json');
if (fs.existsSync(pluginPackageJsonPath)) {
  console.log('Installing plugin dependencies...');
  
  try {
    execSync('npm install', { 
      cwd: pluginDir,
      stdio: 'inherit'
    });
  } catch (error) {
    console.error('Error installing plugin dependencies:', error.message);
  }
}

// Copy frontend files if they exist
const pluginFrontendDir = path.join(pluginDir, 'frontend');
if (fs.existsSync(pluginFrontendDir)) {
  console.log('Installing frontend components...');
  
  // Create plugins directory in frontend if it doesn't exist
  const frontendPluginsDir = path.join(__dirname, 'frontend', 'src', 'plugins');
  if (!fs.existsSync(frontendPluginsDir)) {
    fs.mkdirSync(frontendPluginsDir, { recursive: true });
  }
  
  // Create plugin directory in frontend
  const frontendPluginDir = path.join(frontendPluginsDir, pluginName);
  if (!fs.existsSync(frontendPluginDir)) {
    fs.mkdirSync(frontendPluginDir, { recursive: true });
  }
  
  // Copy frontend files
  const frontendFiles = fs.readdirSync(pluginFrontendDir);
  frontendFiles.forEach(file => {
    const sourcePath = path.join(pluginFrontendDir, file);
    const destPath = path.join(frontendPluginDir, file);
    
    if (fs.statSync(sourcePath).isDirectory()) {
      // Copy directory
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath, { recursive: true });
      }
      
      const files = fs.readdirSync(sourcePath);
      files.forEach(subFile => {
        const sourceFilePath = path.join(sourcePath, subFile);
        const destFilePath = path.join(destPath, subFile);
        
        if (fs.statSync(sourceFilePath).isFile()) {
          fs.copyFileSync(sourceFilePath, destFilePath);
        }
      });
    } else {
      // Copy file
      fs.copyFileSync(sourcePath, destPath);
    }
  });
}

console.log(`Plugin '${pluginName}' installed successfully.`);
console.log('Restart the server to activate the plugin.');

process.exit(0);