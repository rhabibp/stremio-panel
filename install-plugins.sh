#!/bin/bash

# Stremio Management Panel - Plugin Installation Script
# This script installs the Proxy and PIN Authentication plugins

# Print status messages
print_status() {
  echo "[*] $1"
}

# Print success messages
print_success() {
  echo "[✓] $1"
}

# Print error messages
print_error() {
  echo "[✗] $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  print_error "Please run this script as root or with sudo"
  exit 1
fi

# Check if the Stremio Management Panel is installed
if [ ! -d "/opt/stremio-panel" ]; then
  print_error "Stremio Management Panel not found at /opt/stremio-panel"
  print_error "Please install the panel first"
  exit 1
fi

# Set installation directory
INSTALL_DIR="/opt/stremio-panel"
print_status "Installation directory: $INSTALL_DIR"

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
  print_error "Node.js is not installed"
  exit 1
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
  print_error "npm is not installed"
  exit 1
fi

# Create plugins directory if it doesn't exist
PLUGINS_DIR="$INSTALL_DIR/plugins"
if [ ! -d "$PLUGINS_DIR" ]; then
  print_status "Creating plugins directory..."
  mkdir -p "$PLUGINS_DIR"
  print_success "Plugins directory created"
fi

# Function to install a plugin
install_plugin() {
  local plugin_name="$1"
  local plugin_dir="$PLUGINS_DIR/$plugin_name"
  
  print_status "Installing $plugin_name plugin..."
  
  # Check if plugin directory exists in the current directory
  if [ ! -d "$plugin_name" ]; then
    print_error "Plugin directory '$plugin_name' not found"
    return 1
  fi
  
  # Create plugin directory in the installation directory
  if [ ! -d "$plugin_dir" ]; then
    mkdir -p "$plugin_dir"
  fi
  
  # Copy plugin files
  print_status "Copying plugin files..."
  cp -r "$plugin_name"/* "$plugin_dir/"
  print_success "Plugin files copied"
  
  # Install plugin dependencies
  if [ -f "$plugin_dir/package.json" ]; then
    print_status "Installing plugin dependencies..."
    cd "$plugin_dir"
    npm install --production
    print_success "Plugin dependencies installed"
  fi
  
  print_success "$plugin_name plugin installed successfully"
}

# Install the plugin loader script
print_status "Installing plugin loader..."

# Create plugins directory in backend if it doesn't exist
BACKEND_PLUGINS_DIR="$INSTALL_DIR/backend/src/plugins"
if [ ! -d "$BACKEND_PLUGINS_DIR" ]; then
  mkdir -p "$BACKEND_PLUGINS_DIR"
fi

# Create plugin loader script
cat > "$BACKEND_PLUGINS_DIR/plugin-loader.js" << 'EOF'
/**
 * Plugin Loader for Stremio Management Panel
 * 
 * This file is automatically generated and loads all installed plugins.
 */

const fs = require('fs');
const path = require('path');
const express = require('express');

/**
 * Load all installed plugins
 * @param {Object} app - Express app instance
 * @param {Object} options - Plugin loader options
 */
module.exports = function loadPlugins(app, options = {}) {
  console.log('Loading plugins...');
  
  // Get all plugin directories
  const pluginsDir = __dirname;
  const plugins = fs.readdirSync(pluginsDir)
    .filter(dir => {
      const pluginDir = path.join(pluginsDir, dir);
      return fs.statSync(pluginDir).isDirectory() && 
             fs.existsSync(path.join(pluginDir, 'plugin.json'));
    });
  
  // Load each plugin
  plugins.forEach(pluginName => {
    try {
      const pluginDir = path.join(pluginsDir, pluginName);
      const metadata = require(path.join(pluginDir, 'plugin.json'));
      
      console.log(`Loading plugin: ${metadata.name} v${metadata.version}`);
      
      // Load plugin routes if they exist
      const routesDir = path.join(pluginDir, 'routes');
      if (fs.existsSync(routesDir)) {
        const routeFiles = fs.readdirSync(routesDir)
          .filter(file => file.endsWith('.js'));
        
        routeFiles.forEach(file => {
          const routePath = `/api/plugins/${pluginName}/${file.replace('.routes.js', '')}`;
          const router = require(path.join(routesDir, file));
          
          console.log(`  - Registering route: ${routePath}`);
          app.use(routePath, router);
        });
      }
      
      // Execute plugin initialization if it exists
      const initPath = path.join(pluginDir, 'init.js');
      if (fs.existsSync(initPath)) {
        const init = require(initPath);
        if (typeof init === 'function') {
          init(app, options);
        }
      }
      
      console.log(`  - Plugin ${metadata.name} loaded successfully`);
    } catch (error) {
      console.error(`Error loading plugin ${pluginName}:`, error);
    }
  });
  
  console.log('All plugins loaded.');
};
EOF

print_success "Plugin loader installed"

# Update server.js to load plugins
SERVER_JS="$INSTALL_DIR/backend/src/server.js"
if [ -f "$SERVER_JS" ]; then
  print_status "Updating server.js to load plugins..."
  
  # Check if plugin loader is already imported
  if ! grep -q "const loadPlugins" "$SERVER_JS"; then
    # Add plugin loader import
    sed -i "s/const dotenv = require('dotenv');/const dotenv = require('dotenv');\nconst loadPlugins = require('.\/plugins\/plugin-loader');/" "$SERVER_JS"
    
    # Add plugin loader call before the error handling middleware
    sed -i "s/\/\/ Error handling middleware/\/\/ Load plugins\nloadPlugins(app, { server });\n\n\/\/ Error handling middleware/" "$SERVER_JS"
    
    print_success "server.js updated to load plugins"
  else
    print_status "Plugin loader already imported in server.js"
  fi
else
  print_error "server.js not found at $SERVER_JS"
  exit 1
fi

# Install the proxy plugin
install_plugin "proxy"

# Install the PIN authentication plugin
install_plugin "pin-auth"

# Create frontend plugins directory if it doesn't exist
FRONTEND_PLUGINS_DIR="$INSTALL_DIR/frontend/src/plugins"
if [ ! -d "$FRONTEND_PLUGINS_DIR" ]; then
  print_status "Creating frontend plugins directory..."
  mkdir -p "$FRONTEND_PLUGINS_DIR"
  print_success "Frontend plugins directory created"
fi

# Create frontend plugin loader
print_status "Creating frontend plugin loader..."

cat > "$FRONTEND_PLUGINS_DIR/plugin-loader.js" << 'EOF'
/**
 * Frontend Plugin Loader for Stremio Management Panel
 * 
 * This file is automatically generated and loads all installed plugins.
 */

// Import all plugin modules
const pluginModules = import.meta.glob('./*/index.js', { eager: true });

// Extract plugin data
const plugins = Object.entries(pluginModules).map(([path, module]) => {
  const pluginName = path.split('/')[1];
  return {
    name: pluginName,
    ...module
  };
});

// Get all plugin routes
export const getPluginRoutes = () => {
  const routes = [];
  
  plugins.forEach(plugin => {
    if (plugin.routes && Array.isArray(plugin.routes)) {
      routes.push(...plugin.routes);
    }
  });
  
  return routes;
};

// Get all plugin menu items
export const getPluginMenuItems = () => {
  const menuItems = [];
  
  plugins.forEach(plugin => {
    if (plugin.menuItems && Array.isArray(plugin.menuItems)) {
      menuItems.push(...plugin.menuItems);
    }
  });
  
  return menuItems;
};

// Get all plugin login methods
export const getPluginLoginMethods = () => {
  const loginMethods = [];
  
  plugins.forEach(plugin => {
    if (plugin.loginMethods && Array.isArray(plugin.loginMethods)) {
      loginMethods.push(...plugin.loginMethods);
    }
  });
  
  return loginMethods;
};

// Initialize all plugins
export const initializePlugins = (app) => {
  console.log('Initializing frontend plugins...');
  
  const results = [];
  
  plugins.forEach(plugin => {
    try {
      console.log(`Initializing plugin: ${plugin.metadata?.name || plugin.name}`);
      
      if (typeof plugin.initialize === 'function') {
        const result = plugin.initialize(app);
        results.push({
          name: plugin.metadata?.name || plugin.name,
          result
        });
      }
    } catch (error) {
      console.error(`Error initializing plugin ${plugin.name}:`, error);
      results.push({
        name: plugin.metadata?.name || plugin.name,
        error: error.message
      });
    }
  });
  
  console.log('All frontend plugins initialized.');
  return results;
};

// Get all installed plugins
export const getInstalledPlugins = () => {
  return plugins.map(plugin => ({
    name: plugin.name,
    metadata: plugin.metadata || {
      name: plugin.name,
      version: 'unknown',
      description: 'No description available'
    }
  }));
};
EOF

print_success "Frontend plugin loader created"

# Update App.jsx to load plugin routes
APP_JSX="$INSTALL_DIR/frontend/src/App.jsx"
if [ -f "$APP_JSX" ]; then
  print_status "Updating App.jsx to load plugin routes..."
  
  # Check if plugin loader is already imported
  if ! grep -q "import { getPluginRoutes } from './plugins/plugin-loader'" "$APP_JSX"; then
    # Create backup
    cp "$APP_JSX" "$APP_JSX.bak"
    
    # Add plugin loader import
    sed -i "s/import { ThemeProvider, createTheme } from '@mui\/material\/styles';/import { ThemeProvider, createTheme } from '@mui\/material\/styles';\nimport { getPluginRoutes } from '.\/plugins\/plugin-loader';/" "$APP_JSX"
    
    # Add plugin routes to the Routes component
    sed -i "s/<Route path=&quot;\*&quot; element={<NotFound \/>} \/>/<Route path=&quot;\*&quot; element={<NotFound \/>} \/>\n            {\/\* Plugin routes \*\/}\n            {getPluginRoutes().map((route, index) => (\n              <Route\n                key={`plugin-route-${index}`}\n                path={route.path}\n                element={\n                  route.requiredRole ? (\n                    <ProtectedRoute requiredRole={route.requiredRole}>\n                      <route.component \/>\n                    <\/ProtectedRoute>\n                  ) : (\n                    <route.component \/>\n                  )\n                }\n              \/>\n            ))}\n/" "$APP_JSX"
    
    print_success "App.jsx updated to load plugin routes"
  else
    print_status "Plugin loader already imported in App.jsx"
  fi
else
  print_error "App.jsx not found at $APP_JSX"
fi

# Copy plugin frontend files
print_status "Copying plugin frontend files..."

# Copy proxy plugin frontend files
PROXY_FRONTEND_SRC="proxy/frontend"
PROXY_FRONTEND_DEST="$FRONTEND_PLUGINS_DIR/proxy"
if [ -d "$PROXY_FRONTEND_SRC" ]; then
  mkdir -p "$PROXY_FRONTEND_DEST"
  cp -r "$PROXY_FRONTEND_SRC"/* "$PROXY_FRONTEND_DEST/"
  print_success "Proxy plugin frontend files copied"
fi

# Copy PIN authentication plugin frontend files
PIN_AUTH_FRONTEND_SRC="pin-auth/frontend"
PIN_AUTH_FRONTEND_DEST="$FRONTEND_PLUGINS_DIR/pin-auth"
if [ -d "$PIN_AUTH_FRONTEND_SRC" ]; then
  mkdir -p "$PIN_AUTH_FRONTEND_DEST"
  cp -r "$PIN_AUTH_FRONTEND_SRC"/* "$PIN_AUTH_FRONTEND_DEST/"
  print_success "PIN authentication plugin frontend files copied"
fi

# Install socket.io client for PIN authentication
print_status "Installing socket.io-client for PIN authentication..."
cd "$INSTALL_DIR/frontend"
npm install socket.io-client --save
print_success "socket.io-client installed"

# Restart the services
print_status "Restarting services..."
cd "$INSTALL_DIR"
pm2 restart all
print_success "Services restarted"

print_success "Plugins installed successfully!"
print_status "You can now access the following features:"
print_status "- Proxy Manager: http://your-server/proxy"
print_status "- PIN Authentication: http://your-server/pin-login"
print_status "- PIN Manager: http://your-server/pin-manager"